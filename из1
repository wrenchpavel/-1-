#include <iostream>    // Для ввода/вывода (cin, cout)
#include <vector>      // Для использования динамического массива vector
#include <algorithm>   // Для функции min()
#include <stdexcept>   // Для обработки исключений (invalid_argument)

using namespace std;   // Чтобы не писать std:: перед стандартными функциями

/**
 * Функция для чтения и проверки входных данных
 * @param n - ссылка на переменную для количества институтов (будет изменена)
 * @param a - ссылка на вектор для хранения заявок институтов (будет изменен)
 * @param k - ссылка на переменную для количества залов (будет изменена)
 * @throws invalid_argument если данные не соответствуют требованиям
 */
void readInput(int& n, vector<int>& a, int& k) {
    // Шаг 1: Чтение количества институтов
    cout << "Введите количество институтов (n): ";
    cin >> n;
    
    // Проверка, что n в допустимом диапазоне
    if (n < 1 || n > 10000) {
        throw invalid_argument("Ошибка: количество институтов должно быть от 1 до 10000");
    }

    // Шаг 2: Чтение заявок от институтов
    cout << "Введите количество команд от каждого института через пробел: ";
    a.resize(n);  // Устанавливаем размер вектора равным n
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        // Проверка каждой заявки
        if (a[i] < 1 || a[i] > 10000) {
            throw invalid_argument("Ошибка: количество команд должно быть от 1 до 10000");
        }
    }

    // Шаг 3: Чтение количества залов
    cout << "Введите количество залов (k): ";
    cin >> k;
    // Проверка количества залов
    if (k < 1 || k > 10000) {
        throw invalid_argument("Ошибка: количество залов должно быть от 1 до 10000");
    }
}

/**
 * Функция для вычисления максимального числа команд
 * @param n - количество институтов
 * @param a - вектор с заявками институтов
 * @param k - количество залов
 * @return максимальное количество команд, которое можно допустить
 */
int calculateMaxTeams(int n, const vector<int>& a, int k) {
    int total = 0;  // Счетчик общего количества команд
    
    // Проходим по всем институтам
    for (int num : a) {
        // Для каждого института берем минимум из его заявки и количества залов
        total += min(num, k);
    }
    
    return total;
}

/**
 * Функция для вывода результата
 * @param result - вычисленное количество команд для вывода
 */
void printResult(int result) {
    cout << "Максимальное количество команд для участия: " << result << endl;
}

int main() {
    // Вывод приветственного сообщения
    cout << "Программа расчета максимального количества команд для NEERC" << endl;
    cout << "--------------------------------------------------------" << endl;
    
    try {
        int n;          // Количество институтов
        vector<int> a;  // Вектор для хранения заявок
        int k;          // Количество залов
        
        // Шаг 1: Чтение входных данных
        readInput(n, a, k);
        
        // Шаг 2: Вычисление результата
        int result = calculateMaxTeams(n, a, k);
        
        // Шаг 3: Вывод результата
        printResult(result);
        
    } catch (const exception& e) {
        // Обработка ошибок
        cerr << endl << "!!! " << e.what() << endl;
        cerr << "Программа завершена с ошибкой." << endl;
        return 1;  // Возвращаем код ошибки
    }
    
    cout << "--------------------------------------------------------" << endl;
    cout << "Расчет завершен успешно." << endl;
    return 0;  // Успешное завершение программы
}
